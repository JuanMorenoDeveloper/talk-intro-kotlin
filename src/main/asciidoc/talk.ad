= Introducción a Kotlin
:icons: font
:twitter-tag: UDE
:conference-tag:
:talk-tag: Intro Kotlin
:slide-link: http://bit.ly/ude-intro-kotlin
:demo-link: https://github.com/earth001/talk-intro-kotlin
:linkattrs:

include::footer.ad[]

[NOTE.speaker]
====
Contenido de la presentación:

* ¿Qué es Kotlin?
* Características
* Server side development
* Android
* Sintaxis

====

== !
image::kotlin-2-logo-png-transparent.png[background, size=auto]
// https://freebiesupply.com/logos/kotlin-logo-2/

== Contenido
* ¿Qué es Kotlin?
* Características
* Server side development
* Android
* Sintaxis

== ¿Qué es Kotlin?
* Kotlin es un lenguaje de programación con tipado estático para aplicaciones multiplataforma.
* Fue creado por la compañía checa JetBrains en 2010 y liberado bajo licencia Apache en 2011.
* Su nombre proviene de la Isla Kotlin ubicada al oeste de San Petersburgo, Rusia.

== Características

== Conciso

Tiene estructuras que ayudan a reducir el código repetitivo.

== Seguro
Ofrece control en compilación de referencias nulas y conversiones inválidas de clases.

== Interoperable
Es compatible con Java y Android.

== Amistoso

Soportado por los entornos de desarrollo de JetBrains (IntelliJ IDEA, Android Studio) y de terceros.

== Server side development (Backend)

* Expresividad
* Escalabilidad
* Interoperabilidad
* Migración
* Herramientas
* Compatibilidad

[NOTE.speaker]
====
Expresividad: Este lenguaje se destaca en presentar sintaxis innovadora para reducir el código repetitivo y manejar con facilidad abstracciones.

Escalabilidad: Kotlin soporta corrutinas que nos permiten usar programación asincrónica, esto nos beneficia al momento de acceder a recursos (precisamos de ellos solo cuando son necesarios) y nos ofrece facilidad para escalar.
	Interoperabilidad: Es compatible con las librerías y los frameworks Java.

Migración: Puede usarse en conjunto con una base de código Java, lo que nos permite hacer una migración gradual de los sistemas. Esto nos habilita para escribir nuevas funcionalidades con Kotlin y dejar funcionalidades antiguas con Java.

Herramientas: Soporta IDEs populares como IntelliJ y Eclipse, además ofrece plugins especiales para integración con Frameworks.

Compatibilidad: Lo podemos utilizar con Spring, Vert.x, Ktor y kotlinx.html.

====

== Android
* Compatibilidad
* Rendimiento
* Interoperabilidad
* Tamaño
* Tiempo de compilación
* Curva de aprendizaje

[NOTE.speaker]
====
Compatibilidad: Es totalmente compatible con el JDK 6, por lo que las aplicaciones desarrolladas con Kotlin pueden ser instaladas en dispositivos Android con versiones antiguas sin inconvenientes.

Rendimiento: Ofrece un rendimiento igual al de Java y en algunos casos superior.

Interoperabilidad: Al ser compatible con Java, las librerías existentes en Android se pueden usar en Kotlin.

Tamaño: El runtime para Android es chico, solo se agregan en promedio 100KB extras al apk.
	Tiempo de compilación: Ha sido optimizado para ser eficiente en compilación incremental.

Curva de aprendizaje: La transición Java a Kotlin es bastante sencilla, adicionalmente los IDEs ofrecen herramientas para convertir código Java a Kotlin. JetBrains también ofrece guías y tutoriales para los que deseen aprender.

====

== Sintaxis

== !

[source,kotlin]
----
package com.proitc.kotlin //<1>

data class EstudianteKotlin(val nombre: String,
                            val puntaje: Int? = null) //<2>

fun main() { //<3>
  val estudiantes = listOf(EstudianteKotlin("Julia"), //<4>
      EstudianteKotlin("Marco", puntaje = 12), //<5>
      EstudianteKotlin(puntaje = 11, nombre = "Pedro"))

  val mayorPuntaje = estudiantes.maxBy { it.puntaje ?: 0 } //<6>

  println("""El mayor puntaje en Kotlin es de:
    $mayorPuntaje""") //<7>
}
----

[NOTE.speaker]
====
<1> Tenemos la declaración del paquete, y aunque parece similar a Java podemos observar que no hay “;” al final, esto es porque en Kotlin el uso de “;” es opcional.

<2> En este bloque tenemos la declaración de una `data class`, esta es un tipo de clase que podemos usar para almacenar datos. La podemos comparar con un Java Bean o un DTO donde el compilador genera por nosotros el constructor primario, métodos `hashCode`, `equals`, `toString`, `copy`, entre otros.
Otro aspecto importante que vemos es la declaración de propiedades con la palabra reservada `val`, con ella declaramos variables de solo lectura, que pueden ser inicializadas una sola vez, un efecto similar a lo que se lograría con el uso de la palabra reservada `final` en java, haciéndolas inmutables.
Considerar también que el tipo de la variable se define luego de su declaración, esto porque se le da prioridad al nombre de las variables con el objetivo de mejorar la legibilidad.
Adicionalmente vemos dos maneras de definir los tipos de datos, la primera colocándolo directamente como es el caso de String, y la otra agregándole un “?” al final. Esto es porque el compilador hace un control estricto de la nulabilidad, cuando agregamos el “?” le estamos diciendo que esta variable puede almacenar datos nulos, en el caso de que no lo hagamos nos dará un error de compilación. En nuestro caso si inicializamos un EstudianteKotlin con un nombre con valor `null` la aplicación no compilará.

<3> Aquí hacemos la declaración de la función main. Como podemos ver, a diferencia de Java, se pueden declarar funciones fuera de una clase y los argumentos de la función son opcionales.

<4> En estás dos líneas se está creando una lista de `EstudianteKotlin`. Este lenguaje cuenta con una librería estándar para manejo de colecciones, de hecho, tiene variantes para manejar colecciones inmutables o mutables. En este caso listOf crea una lista inmutable. Podemos observar que no se usa la palabra “new” para instanciar objetos como en otros lenguajes. Otro punto importante es que en Kotlin no es necesario definir el tipo de dato en asignaciones o retorno de funciones, esto pues el compilador hace uso de inferencia de tipos (type inference) para determinarlo en tiempo de compilación; la variable `estudiantes` es una `List` inmutable con elementos de tipo `EstudianteKotlin`; toda esa información se obtiene en tiempo de compilación por cómo está declarado el método listOf de la librería estándar.

<5> Inicializamos un objeto usando parámetros nombrados (named parameters), esto nos permite llamar una función o constructor indicando los valores que toman los argumentos de manera explícita, la intención de esto es mejorar la legibilidad en funciones que tienen muchos parámetros. Incluso permite que se pasen los argumentos en distinto orden al que han sido declarados en la firma del método.

<6> Aquí usamos la función `maxBy` de la librería estándar de colecciones. El objetivo de esta función es retornar el primer elemento que tenga el mayor valor según la función indicada, o null si no hay elementos. Considerar que la función es enviada como una expresión lambda (Lambda Expression), que no es otra cosa que una función anónima que puede ser usada como valor. Esta estructura viene de la programación funcional y la podemos usar puesto que Kotlin tiene la capacidad de combinar programación funcional con programación orientada a objetos.
El parámetro `it` de nuestro ejemplo es el nombre por defecto que toma el parámetro de una expresión lambda que recibe un sólo parámetro, en este caso un `EstudianteKotlin`.
El operador Elvis :? (sí, se llama así por el cantante) que aparece en la expresión evalúa la edad de los estudiantes y en caso de que sea null retorna 0. El objetivo de este operador es hacer un control de nulos de manera más concisa.

<7> Por último, imprimimos el resultado usando plantillas de cadenas de texto (String templates) las cuales evalúan el objeto precedido por el símbolo $, en nuestro caso mayorPuntaje, y lo concatenan en la cadena de texto. Al usar una data class en nuestro ejemplo se llama de manera implícita al método `toString()` obteniendo la salida que vimos anteriormente. Otro punto que podemos ver es que Kotlin literales de String de varias líneas.
====

== !
[source,java]
----
package com.proitc.java;

import static java.util.Comparator.comparingInt;

import java.util.List;

class MainJava {

  public static void main(String[] args) {
    final var estudiantes = List
        .of(new EstudianteJava("Julio"), new EstudianteJava("María", 12));
    final var mayorPuntaje = estudiantes.stream().max(comparingInt(es -> {
      if (es.getPuntaje() == null) {
        return 0;
      } else {
        return es.getPuntaje();
      }
    }));
    System.out
        .println(String.format("El mayor puntaje en Java es de: %s",
          mayorPuntaje.orElse(null)));
  }
}
----

== !
[source,java]
----
package com.proitc.java;

import java.util.Objects;

class EstudianteJava {

  private final String nombre;
  private final Integer puntaje;

  EstudianteJava(String nombre, Integer puntaje) {
    Objects.requireNonNull(nombre);
    this.nombre = nombre;
    this.puntaje = puntaje;
  }

  EstudianteJava(String nombre) {
    this(nombre, null);
  }
  // Getters, Setters, Equals y Hashcode
  public String getNombre() {
    return nombre;
  }

  public Integer getPuntaje() {
    return puntaje;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EstudianteJava person = (EstudianteJava) o;
    return Objects.equals(getNombre(), person.getNombre()) &&
        Objects.equals(getPuntaje(), person.getPuntaje());
  }

  @Override
  public int hashCode() {
    return Objects.hash(getNombre(), getPuntaje());
  }

  @Override
  public String toString() {
    return "EstudianteJava{" +
        "nombre='" + getNombre() + '\'' +
        ", puntaje=" + getPuntaje() +
        '}';
  }

}
----

== Sintaxis


== Definición de paquetes

[source,kotlin]
----
package my.demo

import java.util.*

// ...
----

== Definición de funciones

Función que recibe dos parámetros `Int` y retorna un `Int`:

[source,kotlin]
----
fun sum(a: Int, b: Int): Int {
  return a + b
}
----

Función que usa una `expression` e infiere el tipo de retorno:

[source,kotlin]
----
fun sum(a: Int, b: Int) = a + b
----

[NOTE.speaker]
====
Una `expression`, en programación, es una combinación de constantes, variables o funciones, que es interpretada de acuerdo a las normas particulares de precedencia y asociación para un lenguaje de programación en particular. Como en matemáticas, la expresión es su valor evaluado, es decir, la expresión es una representación de ese valor.

Fuente: https://en.wikipedia.org/wiki/Expression_(computer_science)
====

== Definición de funciones

Función que no retorna ningún valor:

[source,kotlin]
----
fun printSum(a: Int, b: Int): Unit {
  print(a + b)
}
----

El tipo de dato `Unit` puede ser inferido:

[source,kotlin]
----
fun printSum(a: Int, b: Int) {
  print(a + b)
}
----

[NOTE.speaker]
====
El tipo `Unit` se corresponde al tipo `void` en Java.

Fuente: https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html
====

== Expresiones

Esta expresión:

[source,kotlin]
----
fun max(a: Int, b: Int): Int {
  if (a > b)
    return a
  else
    return b
}
----

Puede ser re escrita con una `if expression`:

[source,kotlin]
----
fun max(a: Int, b: Int) = if (a > b) a else b
----

== Definición de variables

Asignación única de una variable local:

[source,kotlin]
----
val a: Int = 1
val b = 1   // El tipo `Int` es inferido
val c: Int  // El tipo es requerido cuando no hay inicialización
c = 1       // Única asignación
----

[NOTE.speaker]
====
La palabra `val` tiene comportamiento similar a la palabra `final` en Java, marcando variables para que sean asignadas una única vez.
====

== Definición de variables

Variables mutables

[source,kotlin]
----
var x = 5 // El tipo `Int` es inferido
x += 1
----

== String templates

[source,kotlin]
----
fun ejemplo(a: Any, b: Any) =
  "Este es un texto con las variables ($a, $b)."
----

[NOTE.speaker]
====
La clase `Any` es la raíz de la jerarquía de clases de Kotlin. Todos los objetos en Kotlin tienen a `Any` como superclase. Similar a lo que en Java sería la clase `Object`.

Fuente: https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html
====

== Classes

[source,kotlin]
----
class ItemManager(val categoryId: String, val dbConnection: String) {
  var email = ""
  // ...
}
----

[NOTE.speaker]
====
La declaración de clases en Kotlin es bastante concisa. Su sintaxis nos permite declarar los atributos y el constructor en su definición. Este constructor, llamado también constructor primario recibe los atributos y los inicializa. Si se requieren constructores adicionales se usa la palabra `constructor`.

A continuación se muestra un segundo constructor donde se asigna la propiedad email.

[source,kotlin]
----
constructor(categoryId: String, dbConnection: String, email: String)
  : this(categoryId, dbConnection) {
  this.email = email
}
----

Considere que en este caso, este constructor invoca al constructor primario con la palabra reservada `this`.

====

== Data classes

Un POJO con getters, setters, equals(), hashCode(), toString() y copy() lo definimos con:

[source,kotlin]
----
data class Customer(val name: String,
    val email: String,
    val company: String)
----

== Herencia

Por defecto las clases en Kotlin están cerradas para extensión, el equivalente a clases `final` en java. Para permitir la extensión se usa la palabra reservada `open`.

[source,kotlin]
----
open class Item(val id: String, val name: String = "unknown_name") {
  open fun getIdOfItem(): String {
    return id
  }
}
----

== Herencia
Veamos ahora un ejemplo de extensión:

[source,kotlin]
----
class ItemWithCategory(id: String, name: String, val categoryId: String)
  : Item(id, name) {

  override fun getIdOfItem(): String {
    return id + name
  }
}
----

== Named & Default arguments

[source,kotlin]
----
fun bar(i: Int, s: String = "", b: Boolean = true) {}

fun usage() {
    // named arguments:
    bar(1, b = false)
}
----

== Estructuras de repetición

Para recorrer colecciones Kotlin ofrece la sentencia `for..in`:

[source,kotlin]
----
val numbers = arrayOf("first", "second", "third", "fourth")
for (n in numbers) {
  println(n)
}
----

== Estructuras de repetición

Para iterar sobre un rango de números se puede usar el constructor de rangos:

[source,kotlin]
----
for (i in 2..9 step 2) {
    println(i)
}
----
Este constructor es inclusivo (lado inferior y superior). El parámetro `step` es opcional y en este caso indica el incremento.


== Null

Una variable regular no puede guardar referencias nulas:

[source,kotlin]
----
var a: String = "abc"
a = null // Error de compilación
val l = a.length // ok: variable 'a' nunca puede ser null
----

== Null

Para permitir nulos, tenemos que declarar la variable como nullable usando `'?'`

[source,kotlin]
----
var b: String? = "abc"
a = null // ok
val l = b.length // error: variable 'b' puede ser null
----

== Null
Validando referencias nulas:

[source,kotlin]
----
val l = if (b != null) b.length else -1
----

Invocaciones seguras con `'?'`

[source,kotlin]
----
val l = b?.length // retorna b.length si b no es nula y null de lo contrario.
----

== Operador Elvis `'?:'`

[source,kotlin]
----
val l = b?.length ?: -1
----
Si la expresión a la izquierda de ?: es no nula, el operador elvis la retorna, de lo contrario retorna la expresión de la derecha.

== Extension functions

Permiten extender la funcionalidad de una clase sin tener que heredar de la clase o usar el patron Decorator.

== Extension functions

Por ejemplo ordenar un `List` en Java:

[source,kotlin]
----
Collections.sort( myList, myComparator );
----

y en Kotlin :

[source,kotlin]
----
fun List.sort( myComparator ) {
    Collections.sort(this, myComparator )
}
myList.sort(myComparator)
----

== Collections

Kotlin provee versiones inmutables y mutables de las colecciones:

* `List<T>`/ `MutableList<T>`

* `Set<T>` / `MutableSet<T>`

* `Map<T>` / `MutableMap<T>`

== Collections

[source,kotlin]
----
val numbers: MutableList<Int> = mutableListOf(1, 2, 3)
val readOnlyView: List<Int> = numbers
println(numbers)      // prints "[1, 2, 3]"
numbers.add(4)
println(readOnlyView) // prints "[1, 2, 3, 4]"
readOnlyView.clear()  // -> no compila
                      // 'clear' no esta en la interface Immutable
----

== Collections extensions

[source,kotlin]
----
val items = listOf(1, 2, 3, 4)
items.first() == 1
items.last() == 4
items.filter { it % 2 == 0 }   // returns [2, 4]
// En la línea anterior se usa una expressión lambda
----

[NOTE.speaker]
====
Una expresión lambda en el ámbito de la programación, una función anónima (función literal, expresión lambda) es una subrutina definida que no está enlazada a un identificador.

Las funciones lambda generalmente son:

1. ​Argumentos que son pasados a otras funciones de orden superior
2. Usadas para construir el resultado de una función de orden superior que necesita retornar una función.

Fuente: https://en.wikipedia.org/wiki/Anonymous_function
====

== Collections extensions

[source,kotlin]
----
val rwList = mutableListOf(1, 2, 3)
rwList.requireNoNulls()        // returns [1, 2, 3]
if (rwList.none { it > 6 })
   println("Ningún item mayor a 6")
// prints "Ningún item mayor a 6"
val item = rwList.firstOrNull()
----

== Funciones de orden superior
Funciones que toman como parámetro otra función

[source,kotlin]
----
fun <T, R> List<T>.map(transform: (T) -> R): List<R> {
  val result = arrayListOf<R>()
  for (item in this)
    result.add(transform(item))
  return result
}
val doubled = ints.map { it -> it * 2 } // or : ints.map { it * 2 }
strings.filter { it.length == 5 }.map { it.toUpperCase() }
----

== Conclusiones
* Sintaxis moderna
* Inferencia de tipos
* Control de nulos
* Sintaxis flexible y programación asincrónica
* Compatible con Java

[NOTE.speaker]
====
Kotlin es un lenguaje Open Source moderno con muchas características como: soporte de inferencia de tipos, control de nulos en tiempo de compilación, programación asíncrona y sintaxis flexible. Además, es compatible con el ecosistema Java y podemos usarlo en backend de servidores y aplicaciones Android.

A esto podemos agregar que nos permite combinar programación orientada objetos y funcional con una sintaxis amigable y expresiva.

Al compararlo con Java vemos que una de las principales diferencias es lo conciso y expresivo de su código.

====

include::self.ad[]
